//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace MyNamespace
{
    #pragma warning disable // Disable all warnings

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ControllerBase : System.ComponentModel.INotifyPropertyChanged
    {
        private HttpContext _httpContext;
        private HttpRequest _request;
        private HttpResponse _response;
        private RouteData _routeData;
        private ModelStateDictionary _modelState;
        private ControllerContext _controllerContext;
        private IModelMetadataProvider _metadataProvider;
        private IModelBinderFactory _modelBinderFactory;
        private IUrlHelper _url;
        private IObjectModelValidator _objectValidator;
        private ClaimsPrincipal _user;
    
        [Newtonsoft.Json.JsonProperty("HttpContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HttpContext HttpContext
        {
            get { return _httpContext; }
            set 
            {
                if (_httpContext != value)
                {
                    _httpContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HttpRequest Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HttpResponse Response
        {
            get { return _response; }
            set 
            {
                if (_response != value)
                {
                    _response = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RouteData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouteData RouteData
        {
            get { return _routeData; }
            set 
            {
                if (_routeData != value)
                {
                    _routeData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModelState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelStateDictionary ModelState
        {
            get { return _modelState; }
            set 
            {
                if (_modelState != value)
                {
                    _modelState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ControllerContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ControllerContext ControllerContext
        {
            get { return _controllerContext; }
            set 
            {
                if (_controllerContext != value)
                {
                    _controllerContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IModelMetadataProvider MetadataProvider
        {
            get { return _metadataProvider; }
            set 
            {
                if (_metadataProvider != value)
                {
                    _metadataProvider = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModelBinderFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IModelBinderFactory ModelBinderFactory
        {
            get { return _modelBinderFactory; }
            set 
            {
                if (_modelBinderFactory != value)
                {
                    _modelBinderFactory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IUrlHelper Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ObjectValidator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IObjectModelValidator ObjectValidator
        {
            get { return _objectValidator; }
            set 
            {
                if (_objectValidator != value)
                {
                    _objectValidator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimsPrincipal User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ControllerBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ControllerBase>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class Controller : ControllerBase, System.ComponentModel.INotifyPropertyChanged
    {
        private ViewDataDictionary _viewData;
        private ITempDataDictionary _tempData;
        private object _viewBag;
    
        /// <summary>Gets or sets ViewDataDictionary used by ViewResult and ViewBag.</summary>
        [Newtonsoft.Json.JsonProperty("ViewData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ViewDataDictionary ViewData
        {
            get { return _viewData; }
            set 
            {
                if (_viewData != value)
                {
                    _viewData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets ITempDataDictionary used by ViewResult.</summary>
        [Newtonsoft.Json.JsonProperty("TempData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ITempDataDictionary TempData
        {
            get { return _tempData; }
            set 
            {
                if (_tempData != value)
                {
                    _tempData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the dynamic view bag.</summary>
        [Newtonsoft.Json.JsonProperty("ViewBag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ViewBag
        {
            get { return _viewBag; }
            set 
            {
                if (_viewBag != value)
                {
                    _viewBag = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Controller FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Controller>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VisionController : Controller, System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VisionController FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisionController>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ViewDataDictionary : System.ComponentModel.INotifyPropertyChanged
    {
        private object _model;
        private ModelStateDictionary _modelState;
        private ModelMetadata _modelMetadata;
        private ModelExplorer _modelExplorer;
        private TemplateInfo _templateInfo;
        private object _item;
        private int _count;
        private bool _isReadOnly;
        private System.Collections.ObjectModel.ObservableCollection<string> _keys;
        private System.Collections.ObjectModel.ObservableCollection<object> _values;
    
        /// <summary>Gets or sets the current model.</summary>
        [Newtonsoft.Json.JsonProperty("Model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Model
        {
            get { return _model; }
            set 
            {
                if (_model != value)
                {
                    _model = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the ModelStateDictionary.</summary>
        [Newtonsoft.Json.JsonProperty("ModelState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelStateDictionary ModelState
        {
            get { return _modelState; }
            set 
            {
                if (_modelState != value)
                {
                    _modelState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the ModelMetadata for an expression, the Model (if
        /// non-null), or the declared Type.</summary>
        [Newtonsoft.Json.JsonProperty("ModelMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelMetadata ModelMetadata
        {
            get { return _modelMetadata; }
            set 
            {
                if (_modelMetadata != value)
                {
                    _modelMetadata = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the ModelExplorer for the Model.</summary>
        [Newtonsoft.Json.JsonProperty("ModelExplorer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelExplorer ModelExplorer
        {
            get { return _modelExplorer; }
            set 
            {
                if (_modelExplorer != value)
                {
                    _modelExplorer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the TemplateInfo.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateInfo TemplateInfo
        {
            get { return _templateInfo; }
            set 
            {
                if (_templateInfo != value)
                {
                    _templateInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item
        {
            get { return _item; }
            set 
            {
                if (_item != value)
                {
                    _item = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count
        {
            get { return _count; }
            set 
            {
                if (_count != value)
                {
                    _count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsReadOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReadOnly
        {
            get { return _isReadOnly; }
            set 
            {
                if (_isReadOnly != value)
                {
                    _isReadOnly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Keys
        {
            get { return _keys; }
            set 
            {
                if (_keys != value)
                {
                    _keys = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<object> Values
        {
            get { return _values; }
            set 
            {
                if (_values != value)
                {
                    _values = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ViewDataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ViewDataDictionary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModelStateDictionary : System.ComponentModel.INotifyPropertyChanged
    {
        private ModelStateEntry _root;
        private int _maxAllowedErrors;
        private bool _hasReachedMaxErrors;
        private int _errorCount;
        private int _count;
        private System.Collections.ObjectModel.ObservableCollection<string> _keys = new System.Collections.ObjectModel.ObservableCollection<string>();
        private System.Collections.ObjectModel.ObservableCollection<ModelStateEntry> _values = new System.Collections.ObjectModel.ObservableCollection<ModelStateEntry>();
        private bool _isValid;
        private ModelValidationState _validationState;
        private ModelStateEntry _item;
    
        [Newtonsoft.Json.JsonProperty("Root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelStateEntry Root
        {
            get { return _root; }
            set 
            {
                if (_root != value)
                {
                    _root = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MaxAllowedErrors", Required = Newtonsoft.Json.Required.Always)]
        public int MaxAllowedErrors
        {
            get { return _maxAllowedErrors; }
            set 
            {
                if (_maxAllowedErrors != value)
                {
                    _maxAllowedErrors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HasReachedMaxErrors", Required = Newtonsoft.Json.Required.Always)]
        public bool HasReachedMaxErrors
        {
            get { return _hasReachedMaxErrors; }
            set 
            {
                if (_hasReachedMaxErrors != value)
                {
                    _hasReachedMaxErrors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ErrorCount", Required = Newtonsoft.Json.Required.Always)]
        public int ErrorCount
        {
            get { return _errorCount; }
            set 
            {
                if (_errorCount != value)
                {
                    _errorCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count
        {
            get { return _count; }
            set 
            {
                if (_count != value)
                {
                    _count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> Keys
        {
            get { return _keys; }
            set 
            {
                if (_keys != value)
                {
                    _keys = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ModelStateEntry> Values
        {
            get { return _values; }
            set 
            {
                if (_values != value)
                {
                    _values = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsValid", Required = Newtonsoft.Json.Required.Always)]
        public bool IsValid
        {
            get { return _isValid; }
            set 
            {
                if (_isValid != value)
                {
                    _isValid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ValidationState", Required = Newtonsoft.Json.Required.Always)]
        public ModelValidationState ValidationState
        {
            get { return _validationState; }
            set 
            {
                if (_validationState != value)
                {
                    _validationState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelStateEntry Item
        {
            get { return _item; }
            set 
            {
                if (_item != value)
                {
                    _item = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelStateDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelStateDictionary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ModelStateEntry : System.ComponentModel.INotifyPropertyChanged
    {
        private object _rawValue;
        private string _attemptedValue;
        private object _errors;
        private ModelValidationState _validationState;
    
        [Newtonsoft.Json.JsonProperty("RawValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RawValue
        {
            get { return _rawValue; }
            set 
            {
                if (_rawValue != value)
                {
                    _rawValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AttemptedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttemptedValue
        {
            get { return _attemptedValue; }
            set 
            {
                if (_attemptedValue != value)
                {
                    _attemptedValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Errors
        {
            get { return _errors; }
            set 
            {
                if (_errors != value)
                {
                    _errors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ValidationState", Required = Newtonsoft.Json.Required.Always)]
        public ModelValidationState ValidationState
        {
            get { return _validationState; }
            set 
            {
                if (_validationState != value)
                {
                    _validationState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelStateEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelStateEntry>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModelError : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Exception _exception;
        private string _errorMessage;
    
        [Newtonsoft.Json.JsonProperty("Exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Exception Exception
        {
            get { return _exception; }
            set 
            {
                if (_exception != value)
                {
                    _exception = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage
        {
            get { return _errorMessage; }
            set 
            {
                if (_errorMessage != value)
                {
                    _errorMessage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelError>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModelValidationState
    {
        Unvalidated = 0,
    
        Invalid = 1,
    
        Valid = 2,
    
        Skipped = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ModelMetadata : System.ComponentModel.INotifyPropertyChanged
    {
        private string _containerType;
        private ModelMetadata _containerMetadata;
        private ModelMetadataKind _metadataKind;
        private string _modelType;
        private string _name;
        private string _parameterName;
        private string _propertyName;
        private IPropertyValidationFilter _propertyValidationFilter;
        private string _elementType;
        private bool _isComplexType;
        private bool _isNullableValueType;
        private bool _isCollectionType;
        private bool _isEnumerableType;
        private bool _isReferenceOrNullableType;
        private string _underlyingOrModelType;
    
        [Newtonsoft.Json.JsonProperty("ContainerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerType
        {
            get { return _containerType; }
            set 
            {
                if (_containerType != value)
                {
                    _containerType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ContainerMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelMetadata ContainerMetadata
        {
            get { return _containerMetadata; }
            set 
            {
                if (_containerMetadata != value)
                {
                    _containerMetadata = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataKind", Required = Newtonsoft.Json.Required.Always)]
        public ModelMetadataKind MetadataKind
        {
            get { return _metadataKind; }
            set 
            {
                if (_metadataKind != value)
                {
                    _metadataKind = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelType
        {
            get { return _modelType; }
            set 
            {
                if (_modelType != value)
                {
                    _modelType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ParameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName
        {
            get { return _parameterName; }
            set 
            {
                if (_parameterName != value)
                {
                    _parameterName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PropertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName
        {
            get { return _propertyName; }
            set 
            {
                if (_propertyName != value)
                {
                    _propertyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PropertyValidationFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPropertyValidationFilter PropertyValidationFilter
        {
            get { return _propertyValidationFilter; }
            set 
            {
                if (_propertyValidationFilter != value)
                {
                    _propertyValidationFilter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ElementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementType
        {
            get { return _elementType; }
            set 
            {
                if (_elementType != value)
                {
                    _elementType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsComplexType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsComplexType
        {
            get { return _isComplexType; }
            set 
            {
                if (_isComplexType != value)
                {
                    _isComplexType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsNullableValueType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsNullableValueType
        {
            get { return _isNullableValueType; }
            set 
            {
                if (_isNullableValueType != value)
                {
                    _isNullableValueType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsCollectionType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCollectionType
        {
            get { return _isCollectionType; }
            set 
            {
                if (_isCollectionType != value)
                {
                    _isCollectionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsEnumerableType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEnumerableType
        {
            get { return _isEnumerableType; }
            set 
            {
                if (_isEnumerableType != value)
                {
                    _isEnumerableType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsReferenceOrNullableType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReferenceOrNullableType
        {
            get { return _isReferenceOrNullableType; }
            set 
            {
                if (_isReferenceOrNullableType != value)
                {
                    _isReferenceOrNullableType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("UnderlyingOrModelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnderlyingOrModelType
        {
            get { return _underlyingOrModelType; }
            set 
            {
                if (_underlyingOrModelType != value)
                {
                    _underlyingOrModelType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelMetadata>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModelMetadataKind
    {
        Type = 0,
    
        Property = 1,
    
        Parameter = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IPropertyValidationFilter : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IPropertyValidationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IPropertyValidationFilter>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Associates a model object with it's corresponding ModelMetadata.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModelExplorer : System.ComponentModel.INotifyPropertyChanged
    {
        private ModelExplorer _container;
        private ModelMetadata _metadata;
        private object _model;
        private string _modelType;
        private System.Collections.ObjectModel.ObservableCollection<ModelExplorer> _properties;
    
        /// <summary>Gets the container ModelExplorer.</summary>
        [Newtonsoft.Json.JsonProperty("Container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelExplorer Container
        {
            get { return _container; }
            set 
            {
                if (_container != value)
                {
                    _container = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the ModelMetadata.</summary>
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelMetadata Metadata
        {
            get { return _metadata; }
            set 
            {
                if (_metadata != value)
                {
                    _metadata = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the model object.</summary>
        [Newtonsoft.Json.JsonProperty("Model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Model
        {
            get { return _model; }
            set 
            {
                if (_model != value)
                {
                    _model = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelType
        {
            get { return _modelType; }
            set 
            {
                if (_modelType != value)
                {
                    _modelType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets the properties.</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ModelExplorer> Properties
        {
            get { return _properties; }
            set 
            {
                if (_properties != value)
                {
                    _properties = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelExplorer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelExplorer>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TemplateInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private object _formattedModelValue;
        private string _htmlFieldPrefix;
        private int _templateDepth;
    
        /// <summary>Gets or sets the formatted model value.</summary>
        [Newtonsoft.Json.JsonProperty("FormattedModelValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object FormattedModelValue
        {
            get { return _formattedModelValue; }
            set 
            {
                if (_formattedModelValue != value)
                {
                    _formattedModelValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the HTML field prefix.</summary>
        [Newtonsoft.Json.JsonProperty("HtmlFieldPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlFieldPrefix
        {
            get { return _htmlFieldPrefix; }
            set 
            {
                if (_htmlFieldPrefix != value)
                {
                    _htmlFieldPrefix = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TemplateDepth", Required = Newtonsoft.Json.Required.Always)]
        public int TemplateDepth
        {
            get { return _templateDepth; }
            set 
            {
                if (_templateDepth != value)
                {
                    _templateDepth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Represents a set of data that persists only from one request to the next.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ITempDataDictionary : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ITempDataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ITempDataDictionary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class HttpContext : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HttpContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HttpContext>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class HttpRequest : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HttpRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HttpRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class HttpResponse : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HttpResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HttpResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RouteData : System.ComponentModel.INotifyPropertyChanged
    {
        private RouteValueDictionary _dataTokens;
        private System.Collections.ObjectModel.ObservableCollection<IRouter> _routers;
        private RouteValueDictionary _values;
    
        [Newtonsoft.Json.JsonProperty("DataTokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouteValueDictionary DataTokens
        {
            get { return _dataTokens; }
            set 
            {
                if (_dataTokens != value)
                {
                    _dataTokens = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Routers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IRouter> Routers
        {
            get { return _routers; }
            set 
            {
                if (_routers != value)
                {
                    _routers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouteValueDictionary Values
        {
            get { return _values; }
            set 
            {
                if (_values != value)
                {
                    _values = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RouteData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RouteData>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RouteValueDictionary : System.ComponentModel.INotifyPropertyChanged
    {
        private object _item;
        private IEqualityComparerOfString _comparer;
        private int _count;
        private System.Collections.ObjectModel.ObservableCollection<string> _keys;
        private System.Collections.ObjectModel.ObservableCollection<object> _values;
    
        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item
        {
            get { return _item; }
            set 
            {
                if (_item != value)
                {
                    _item = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Comparer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEqualityComparerOfString Comparer
        {
            get { return _comparer; }
            set 
            {
                if (_comparer != value)
                {
                    _comparer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count
        {
            get { return _count; }
            set 
            {
                if (_count != value)
                {
                    _count = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Keys
        {
            get { return _keys; }
            set 
            {
                if (_keys != value)
                {
                    _keys = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<object> Values
        {
            get { return _values; }
            set 
            {
                if (_values != value)
                {
                    _values = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RouteValueDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RouteValueDictionary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IEqualityComparerOfString : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IEqualityComparerOfString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IEqualityComparerOfString>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IRouter : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IRouter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IRouter>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActionContext : System.ComponentModel.INotifyPropertyChanged
    {
        private ActionDescriptor _actionDescriptor;
        private HttpContext _httpContext;
        private ModelStateDictionary _modelState;
        private RouteData _routeData;
    
        [Newtonsoft.Json.JsonProperty("ActionDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionDescriptor ActionDescriptor
        {
            get { return _actionDescriptor; }
            set 
            {
                if (_actionDescriptor != value)
                {
                    _actionDescriptor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HttpContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HttpContext HttpContext
        {
            get { return _httpContext; }
            set 
            {
                if (_httpContext != value)
                {
                    _httpContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModelState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModelStateDictionary ModelState
        {
            get { return _modelState; }
            set 
            {
                if (_modelState != value)
                {
                    _modelState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RouteData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouteData RouteData
        {
            get { return _routeData; }
            set 
            {
                if (_routeData != value)
                {
                    _routeData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ActionContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionContext>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ControllerContext : ActionContext, System.ComponentModel.INotifyPropertyChanged
    {
        private ControllerActionDescriptor _actionDescriptor;
        private System.Collections.ObjectModel.ObservableCollection<IValueProviderFactory> _valueProviderFactories;
    
        [Newtonsoft.Json.JsonProperty("ActionDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ControllerActionDescriptor ActionDescriptor
        {
            get { return _actionDescriptor; }
            set 
            {
                if (_actionDescriptor != value)
                {
                    _actionDescriptor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ValueProviderFactories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IValueProviderFactory> ValueProviderFactories
        {
            get { return _valueProviderFactories; }
            set 
            {
                if (_valueProviderFactories != value)
                {
                    _valueProviderFactories = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ControllerContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ControllerContext>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActionDescriptor : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private System.Collections.Generic.Dictionary<string, string> _routeValues;
        private AttributeRouteInfo _attributeRouteInfo;
        private System.Collections.ObjectModel.ObservableCollection<IActionConstraintMetadata> _actionConstraints;
        private System.Collections.ObjectModel.ObservableCollection<ParameterDescriptor> _parameters;
        private System.Collections.ObjectModel.ObservableCollection<ParameterDescriptor> _boundProperties;
        private System.Collections.ObjectModel.ObservableCollection<FilterDescriptor> _filterDescriptors;
        private string _displayName;
        private System.Collections.Generic.Dictionary<string, object> _properties;
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RouteValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> RouteValues
        {
            get { return _routeValues; }
            set 
            {
                if (_routeValues != value)
                {
                    _routeValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AttributeRouteInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeRouteInfo AttributeRouteInfo
        {
            get { return _attributeRouteInfo; }
            set 
            {
                if (_attributeRouteInfo != value)
                {
                    _attributeRouteInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ActionConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IActionConstraintMetadata> ActionConstraints
        {
            get { return _actionConstraints; }
            set 
            {
                if (_actionConstraints != value)
                {
                    _actionConstraints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParameterDescriptor> Parameters
        {
            get { return _parameters; }
            set 
            {
                if (_parameters != value)
                {
                    _parameters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("BoundProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParameterDescriptor> BoundProperties
        {
            get { return _boundProperties; }
            set 
            {
                if (_boundProperties != value)
                {
                    _boundProperties = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("FilterDescriptors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FilterDescriptor> FilterDescriptors
        {
            get { return _filterDescriptors; }
            set 
            {
                if (_filterDescriptors != value)
                {
                    _filterDescriptors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Properties
        {
            get { return _properties; }
            set 
            {
                if (_properties != value)
                {
                    _properties = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ActionDescriptor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionDescriptor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ControllerActionDescriptor : ActionDescriptor, System.ComponentModel.INotifyPropertyChanged
    {
        private string _controllerName;
        private string _actionName;
        private MethodInfo _methodInfo;
        private string _controllerTypeInfo;
        private string _displayName;
    
        [Newtonsoft.Json.JsonProperty("ControllerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControllerName
        {
            get { return _controllerName; }
            set 
            {
                if (_controllerName != value)
                {
                    _controllerName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ActionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionName
        {
            get { return _actionName; }
            set 
            {
                if (_actionName != value)
                {
                    _actionName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MethodInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodInfo MethodInfo
        {
            get { return _methodInfo; }
            set 
            {
                if (_methodInfo != value)
                {
                    _methodInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ControllerTypeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControllerTypeInfo
        {
            get { return _controllerTypeInfo; }
            set 
            {
                if (_controllerTypeInfo != value)
                {
                    _controllerTypeInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ControllerActionDescriptor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ControllerActionDescriptor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MemberInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private Module _module;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int _metadataToken;
    
        [Newtonsoft.Json.JsonProperty("Module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Module Module
        {
            get { return _module; }
            set 
            {
                if (_module != value)
                {
                    _module = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Always)]
        public int MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MemberInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MemberInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MethodBase : MemberInfo, System.ComponentModel.INotifyPropertyChanged
    {
        private MethodImplAttributes _methodImplementationFlags;
        private CallingConventions _callingConvention;
        private bool _isAbstract;
        private bool _isConstructor;
        private bool _isFinal;
        private bool _isHideBySig;
        private bool _isSpecialName;
        private bool _isStatic;
        private bool _isVirtual;
        private bool _isAssembly;
        private bool _isFamily;
        private bool _isFamilyAndAssembly;
        private bool _isFamilyOrAssembly;
        private bool _isPrivate;
        private bool _isPublic;
        private bool _isConstructedGenericMethod;
        private bool _isGenericMethod;
        private bool _isGenericMethodDefinition;
        private bool _containsGenericParameters;
        private bool _isSecurityCritical;
        private bool _isSecuritySafeCritical;
        private bool _isSecurityTransparent;
    
        [Newtonsoft.Json.JsonProperty("MethodImplementationFlags", Required = Newtonsoft.Json.Required.Always)]
        public MethodImplAttributes MethodImplementationFlags
        {
            get { return _methodImplementationFlags; }
            set 
            {
                if (_methodImplementationFlags != value)
                {
                    _methodImplementationFlags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CallingConvention", Required = Newtonsoft.Json.Required.Always)]
        public CallingConventions CallingConvention
        {
            get { return _callingConvention; }
            set 
            {
                if (_callingConvention != value)
                {
                    _callingConvention = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAbstract", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAbstract
        {
            get { return _isAbstract; }
            set 
            {
                if (_isAbstract != value)
                {
                    _isAbstract = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsConstructor", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConstructor
        {
            get { return _isConstructor; }
            set 
            {
                if (_isConstructor != value)
                {
                    _isConstructor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFinal", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFinal
        {
            get { return _isFinal; }
            set 
            {
                if (_isFinal != value)
                {
                    _isFinal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsHideBySig", Required = Newtonsoft.Json.Required.Always)]
        public bool IsHideBySig
        {
            get { return _isHideBySig; }
            set 
            {
                if (_isHideBySig != value)
                {
                    _isHideBySig = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSpecialName", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSpecialName
        {
            get { return _isSpecialName; }
            set 
            {
                if (_isSpecialName != value)
                {
                    _isSpecialName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsStatic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsStatic
        {
            get { return _isStatic; }
            set 
            {
                if (_isStatic != value)
                {
                    _isStatic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Always)]
        public bool IsVirtual
        {
            get { return _isVirtual; }
            set 
            {
                if (_isVirtual != value)
                {
                    _isVirtual = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAssembly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAssembly
        {
            get { return _isAssembly; }
            set 
            {
                if (_isAssembly != value)
                {
                    _isAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamily", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFamily
        {
            get { return _isFamily; }
            set 
            {
                if (_isFamily != value)
                {
                    _isFamily = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyAndAssembly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFamilyAndAssembly
        {
            get { return _isFamilyAndAssembly; }
            set 
            {
                if (_isFamilyAndAssembly != value)
                {
                    _isFamilyAndAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFamilyOrAssembly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFamilyOrAssembly
        {
            get { return _isFamilyOrAssembly; }
            set 
            {
                if (_isFamilyOrAssembly != value)
                {
                    _isFamilyOrAssembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPrivate
        {
            get { return _isPrivate; }
            set 
            {
                if (_isPrivate != value)
                {
                    _isPrivate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPublic
        {
            get { return _isPublic; }
            set 
            {
                if (_isPublic != value)
                {
                    _isPublic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsConstructedGenericMethod", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConstructedGenericMethod
        {
            get { return _isConstructedGenericMethod; }
            set 
            {
                if (_isConstructedGenericMethod != value)
                {
                    _isConstructedGenericMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethod", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGenericMethod
        {
            get { return _isGenericMethod; }
            set 
            {
                if (_isGenericMethod != value)
                {
                    _isGenericMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGenericMethodDefinition", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGenericMethodDefinition
        {
            get { return _isGenericMethodDefinition; }
            set 
            {
                if (_isGenericMethodDefinition != value)
                {
                    _isGenericMethodDefinition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ContainsGenericParameters", Required = Newtonsoft.Json.Required.Always)]
        public bool ContainsGenericParameters
        {
            get { return _containsGenericParameters; }
            set 
            {
                if (_containsGenericParameters != value)
                {
                    _containsGenericParameters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityCritical", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSecurityCritical
        {
            get { return _isSecurityCritical; }
            set 
            {
                if (_isSecurityCritical != value)
                {
                    _isSecurityCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecuritySafeCritical", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSecuritySafeCritical
        {
            get { return _isSecuritySafeCritical; }
            set 
            {
                if (_isSecuritySafeCritical != value)
                {
                    _isSecuritySafeCritical = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsSecurityTransparent", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSecurityTransparent
        {
            get { return _isSecurityTransparent; }
            set 
            {
                if (_isSecurityTransparent != value)
                {
                    _isSecurityTransparent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MethodBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MethodBase>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MethodInfo : MethodBase, System.ComponentModel.INotifyPropertyChanged
    {
        private MemberTypes _memberType;
        private ParameterInfo _returnParameter;
        private string _returnType;
    
        [Newtonsoft.Json.JsonProperty("MemberType", Required = Newtonsoft.Json.Required.Always)]
        public MemberTypes MemberType
        {
            get { return _memberType; }
            set 
            {
                if (_memberType != value)
                {
                    _memberType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReturnParameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParameterInfo ReturnParameter
        {
            get { return _returnParameter; }
            set 
            {
                if (_returnParameter != value)
                {
                    _returnParameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReturnType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnType
        {
            get { return _returnType; }
            set 
            {
                if (_returnType != value)
                {
                    _returnType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MethodInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MethodInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    [System.Flags]
    public enum MemberTypes
    {
        Constructor = 1,
    
        Event = 2,
    
        Field = 4,
    
        Method = 8,
    
        Property = 16,
    
        TypeInfo = 32,
    
        Custom = 64,
    
        NestedType = 128,
    
        All = 256,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private ParameterAttributes _attributes;
        private MemberInfo _member;
        private string _name;
        private string _parameterType;
        private int _position;
        private bool _isIn;
        private bool _isLcid;
        private bool _isOptional;
        private bool _isOut;
        private bool _isRetval;
        private object _defaultValue;
        private object _rawDefaultValue;
        private bool _hasDefaultValue;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int _metadataToken;
    
        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Always)]
        public ParameterAttributes Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Member", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemberInfo Member
        {
            get { return _member; }
            set 
            {
                if (_member != value)
                {
                    _member = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterType
        {
            get { return _parameterType; }
            set 
            {
                if (_parameterType != value)
                {
                    _parameterType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Always)]
        public int Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsIn", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIn
        {
            get { return _isIn; }
            set 
            {
                if (_isIn != value)
                {
                    _isIn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsLcid", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLcid
        {
            get { return _isLcid; }
            set 
            {
                if (_isLcid != value)
                {
                    _isLcid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsOptional", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOptional
        {
            get { return _isOptional; }
            set 
            {
                if (_isOptional != value)
                {
                    _isOptional = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsOut", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOut
        {
            get { return _isOut; }
            set 
            {
                if (_isOut != value)
                {
                    _isOut = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsRetval", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRetval
        {
            get { return _isRetval; }
            set 
            {
                if (_isRetval != value)
                {
                    _isRetval = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue
        {
            get { return _defaultValue; }
            set 
            {
                if (_defaultValue != value)
                {
                    _defaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RawDefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RawDefaultValue
        {
            get { return _rawDefaultValue; }
            set 
            {
                if (_rawDefaultValue != value)
                {
                    _rawDefaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HasDefaultValue", Required = Newtonsoft.Json.Required.Always)]
        public bool HasDefaultValue
        {
            get { return _hasDefaultValue; }
            set 
            {
                if (_hasDefaultValue != value)
                {
                    _hasDefaultValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Always)]
        public int MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    [System.Flags]
    public enum ParameterAttributes
    {
        None = 1,
    
        In = 2,
    
        Out = 4,
    
        Lcid = 8,
    
        Retval = 16,
    
        Optional = 32,
    
        HasDefault = 64,
    
        HasFieldMarshal = 128,
    
        Reserved3 = 256,
    
        Reserved4 = 512,
    
        ReservedMask = 1024,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class Module : System.ComponentModel.INotifyPropertyChanged
    {
        private Assembly _assembly;
        private string _fullyQualifiedName;
        private string _name;
        private int _mDStreamVersion;
        private System.Guid _moduleVersionId;
        private string _scopeName;
        private ModuleHandle _moduleHandle = new ModuleHandle();
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private int _metadataToken;
    
        [Newtonsoft.Json.JsonProperty("Assembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Assembly Assembly
        {
            get { return _assembly; }
            set 
            {
                if (_assembly != value)
                {
                    _assembly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("FullyQualifiedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyQualifiedName
        {
            get { return _fullyQualifiedName; }
            set 
            {
                if (_fullyQualifiedName != value)
                {
                    _fullyQualifiedName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MDStreamVersion", Required = Newtonsoft.Json.Required.Always)]
        public int MDStreamVersion
        {
            get { return _mDStreamVersion; }
            set 
            {
                if (_mDStreamVersion != value)
                {
                    _mDStreamVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModuleVersionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ModuleVersionId
        {
            get { return _moduleVersionId; }
            set 
            {
                if (_moduleVersionId != value)
                {
                    _moduleVersionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ScopeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeName
        {
            get { return _scopeName; }
            set 
            {
                if (_scopeName != value)
                {
                    _scopeName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ModuleHandle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ModuleHandle ModuleHandle
        {
            get { return _moduleHandle; }
            set 
            {
                if (_moduleHandle != value)
                {
                    _moduleHandle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MetadataToken", Required = Newtonsoft.Json.Required.Always)]
        public int MetadataToken
        {
            get { return _metadataToken; }
            set 
            {
                if (_metadataToken != value)
                {
                    _metadataToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Module FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Module>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class Assembly : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<string> _definedTypes;
        private System.Collections.ObjectModel.ObservableCollection<string> _exportedTypes;
        private string _codeBase;
        private MethodInfo _entryPoint;
        private string _fullName;
        private string _imageRuntimeVersion;
        private bool _isDynamic;
        private string _location;
        private bool _reflectionOnly;
        private bool _isFullyTrusted;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> _customAttributes;
        private string _escapedCodeBase;
        private Module _manifestModule;
        private System.Collections.ObjectModel.ObservableCollection<Module> _modules;
        private bool _globalAssemblyCache;
        private long _hostContext;
        private SecurityRuleSet _securityRuleSet;
    
        [Newtonsoft.Json.JsonProperty("DefinedTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> DefinedTypes
        {
            get { return _definedTypes; }
            set 
            {
                if (_definedTypes != value)
                {
                    _definedTypes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ExportedTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ExportedTypes
        {
            get { return _exportedTypes; }
            set 
            {
                if (_exportedTypes != value)
                {
                    _exportedTypes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CodeBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeBase
        {
            get { return _codeBase; }
            set 
            {
                if (_codeBase != value)
                {
                    _codeBase = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EntryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodInfo EntryPoint
        {
            get { return _entryPoint; }
            set 
            {
                if (_entryPoint != value)
                {
                    _entryPoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName
        {
            get { return _fullName; }
            set 
            {
                if (_fullName != value)
                {
                    _fullName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ImageRuntimeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageRuntimeVersion
        {
            get { return _imageRuntimeVersion; }
            set 
            {
                if (_imageRuntimeVersion != value)
                {
                    _imageRuntimeVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsDynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDynamic
        {
            get { return _isDynamic; }
            set 
            {
                if (_isDynamic != value)
                {
                    _isDynamic = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location
        {
            get { return _location; }
            set 
            {
                if (_location != value)
                {
                    _location = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ReflectionOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool ReflectionOnly
        {
            get { return _reflectionOnly; }
            set 
            {
                if (_reflectionOnly != value)
                {
                    _reflectionOnly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFullyTrusted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFullyTrusted
        {
            get { return _isFullyTrusted; }
            set 
            {
                if (_isFullyTrusted != value)
                {
                    _isFullyTrusted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeData> CustomAttributes
        {
            get { return _customAttributes; }
            set 
            {
                if (_customAttributes != value)
                {
                    _customAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EscapedCodeBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EscapedCodeBase
        {
            get { return _escapedCodeBase; }
            set 
            {
                if (_escapedCodeBase != value)
                {
                    _escapedCodeBase = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ManifestModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Module ManifestModule
        {
            get { return _manifestModule; }
            set 
            {
                if (_manifestModule != value)
                {
                    _manifestModule = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Modules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Module> Modules
        {
            get { return _modules; }
            set 
            {
                if (_modules != value)
                {
                    _modules = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("GlobalAssemblyCache", Required = Newtonsoft.Json.Required.Always)]
        public bool GlobalAssemblyCache
        {
            get { return _globalAssemblyCache; }
            set 
            {
                if (_globalAssemblyCache != value)
                {
                    _globalAssemblyCache = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("HostContext", Required = Newtonsoft.Json.Required.Always)]
        public long HostContext
        {
            get { return _hostContext; }
            set 
            {
                if (_hostContext != value)
                {
                    _hostContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SecurityRuleSet", Required = Newtonsoft.Json.Required.Always)]
        public SecurityRuleSet SecurityRuleSet
        {
            get { return _securityRuleSet; }
            set 
            {
                if (_securityRuleSet != value)
                {
                    _securityRuleSet = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Assembly FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Assembly>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _attributeType;
        private ConstructorInfo _constructor;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeTypedArgument> _constructorArguments;
        private System.Collections.ObjectModel.ObservableCollection<CustomAttributeNamedArgument> _namedArguments;
    
        [Newtonsoft.Json.JsonProperty("AttributeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeType
        {
            get { return _attributeType; }
            set 
            {
                if (_attributeType != value)
                {
                    _attributeType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Constructor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConstructorInfo Constructor
        {
            get { return _constructor; }
            set 
            {
                if (_constructor != value)
                {
                    _constructor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ConstructorArguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeTypedArgument> ConstructorArguments
        {
            get { return _constructorArguments; }
            set 
            {
                if (_constructorArguments != value)
                {
                    _constructorArguments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NamedArguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CustomAttributeNamedArgument> NamedArguments
        {
            get { return _namedArguments; }
            set 
            {
                if (_namedArguments != value)
                {
                    _namedArguments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeData>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class ConstructorInfo : MethodBase, System.ComponentModel.INotifyPropertyChanged
    {
        private MemberTypes _memberType;
    
        [Newtonsoft.Json.JsonProperty("MemberType", Required = Newtonsoft.Json.Required.Always)]
        public MemberTypes MemberType
        {
            get { return _memberType; }
            set 
            {
                if (_memberType != value)
                {
                    _memberType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConstructorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConstructorInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MethodImplAttributes
    {
        Managed = 0,
    
        IL = 0,
    
        Native = 1,
    
        OPTIL = 2,
    
        Runtime = 3,
    
        CodeTypeMask = 3,
    
        Unmanaged = 4,
    
        ManagedMask = 4,
    
        NoInlining = 8,
    
        ForwardRef = 16,
    
        Synchronized = 32,
    
        NoOptimization = 64,
    
        PreserveSig = 128,
    
        AggressiveInlining = 256,
    
        InternalCall = 4096,
    
        MaxMethodImplVal = 65535,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    [System.Flags]
    public enum CallingConventions
    {
        Standard = 1,
    
        VarArgs = 2,
    
        Any = 4,
    
        HasThis = 8,
    
        ExplicitThis = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeTypedArgument : System.ComponentModel.INotifyPropertyChanged
    {
        private string _argumentType;
        private object _value;
    
        [Newtonsoft.Json.JsonProperty("ArgumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentType
        {
            get { return _argumentType; }
            set 
            {
                if (_argumentType != value)
                {
                    _argumentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeTypedArgument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeTypedArgument>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomAttributeNamedArgument : System.ComponentModel.INotifyPropertyChanged
    {
        private MemberInfo _memberInfo;
        private CustomAttributeTypedArgument _typedValue = new CustomAttributeTypedArgument();
        private string _memberName;
        private bool _isField;
    
        [Newtonsoft.Json.JsonProperty("MemberInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemberInfo MemberInfo
        {
            get { return _memberInfo; }
            set 
            {
                if (_memberInfo != value)
                {
                    _memberInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypedValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomAttributeTypedArgument TypedValue
        {
            get { return _typedValue; }
            set 
            {
                if (_typedValue != value)
                {
                    _typedValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MemberName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberName
        {
            get { return _memberName; }
            set 
            {
                if (_memberName != value)
                {
                    _memberName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsField", Required = Newtonsoft.Json.Required.Always)]
        public bool IsField
        {
            get { return _isField; }
            set 
            {
                if (_isField != value)
                {
                    _isField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomAttributeNamedArgument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomAttributeNamedArgument>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SecurityRuleSet
    {
        None = 0,
    
        Level1 = 1,
    
        Level2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModuleHandle : System.ComponentModel.INotifyPropertyChanged
    {
        private int _mDStreamVersion;
    
        [Newtonsoft.Json.JsonProperty("MDStreamVersion", Required = Newtonsoft.Json.Required.Always)]
        public int MDStreamVersion
        {
            get { return _mDStreamVersion; }
            set 
            {
                if (_mDStreamVersion != value)
                {
                    _mDStreamVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModuleHandle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModuleHandle>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AttributeRouteInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private string _template;
        private int _order;
        private string _name;
        private bool _suppressLinkGeneration;
        private bool _suppressPathMatching;
    
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template
        {
            get { return _template; }
            set 
            {
                if (_template != value)
                {
                    _template = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Always)]
        public int Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SuppressLinkGeneration", Required = Newtonsoft.Json.Required.Always)]
        public bool SuppressLinkGeneration
        {
            get { return _suppressLinkGeneration; }
            set 
            {
                if (_suppressLinkGeneration != value)
                {
                    _suppressLinkGeneration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SuppressPathMatching", Required = Newtonsoft.Json.Required.Always)]
        public bool SuppressPathMatching
        {
            get { return _suppressPathMatching; }
            set 
            {
                if (_suppressPathMatching != value)
                {
                    _suppressPathMatching = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AttributeRouteInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeRouteInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IActionConstraintMetadata : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IActionConstraintMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IActionConstraintMetadata>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterDescriptor : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _parameterType;
        private BindingInfo _bindingInfo;
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterType
        {
            get { return _parameterType; }
            set 
            {
                if (_parameterType != value)
                {
                    _parameterType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("BindingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BindingInfo BindingInfo
        {
            get { return _bindingInfo; }
            set 
            {
                if (_bindingInfo != value)
                {
                    _bindingInfo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterDescriptor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterDescriptor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BindingInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private BindingSource _bindingSource;
        private string _binderModelName;
        private string _binderType;
        private IPropertyFilterProvider _propertyFilterProvider;
        private FuncOfActionContextAndBoolean _requestPredicate;
    
        [Newtonsoft.Json.JsonProperty("BindingSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BindingSource BindingSource
        {
            get { return _bindingSource; }
            set 
            {
                if (_bindingSource != value)
                {
                    _bindingSource = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("BinderModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BinderModelName
        {
            get { return _binderModelName; }
            set 
            {
                if (_binderModelName != value)
                {
                    _binderModelName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("BinderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BinderType
        {
            get { return _binderType; }
            set 
            {
                if (_binderType != value)
                {
                    _binderType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PropertyFilterProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPropertyFilterProvider PropertyFilterProvider
        {
            get { return _propertyFilterProvider; }
            set 
            {
                if (_propertyFilterProvider != value)
                {
                    _propertyFilterProvider = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RequestPredicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FuncOfActionContextAndBoolean RequestPredicate
        {
            get { return _requestPredicate; }
            set 
            {
                if (_requestPredicate != value)
                {
                    _requestPredicate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BindingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BindingInfo>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BindingSource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _displayName;
        private string _id;
        private bool _isGreedy;
        private bool _isFromRequest;
    
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsGreedy", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGreedy
        {
            get { return _isGreedy; }
            set 
            {
                if (_isGreedy != value)
                {
                    _isGreedy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsFromRequest", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFromRequest
        {
            get { return _isFromRequest; }
            set 
            {
                if (_isFromRequest != value)
                {
                    _isFromRequest = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BindingSource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BindingSource>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IPropertyFilterProvider : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IPropertyFilterProvider FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IPropertyFilterProvider>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class Delegate : System.ComponentModel.INotifyPropertyChanged
    {
        private MethodInfo _method;
        private object _target;
    
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodInfo Method
        {
            get { return _method; }
            set 
            {
                if (_method != value)
                {
                    _method = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Target
        {
            get { return _target; }
            set 
            {
                if (_target != value)
                {
                    _target = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Delegate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Delegate>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class MulticastDelegate : Delegate, System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MulticastDelegate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MulticastDelegate>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FuncOfActionContextAndBoolean : MulticastDelegate, System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FuncOfActionContextAndBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FuncOfActionContextAndBoolean>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FilterDescriptor : System.ComponentModel.INotifyPropertyChanged
    {
        private IFilterMetadata _filter;
        private int _order;
        private int _scope;
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IFilterMetadata Filter
        {
            get { return _filter; }
            set 
            {
                if (_filter != value)
                {
                    _filter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Order", Required = Newtonsoft.Json.Required.Always)]
        public int Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.Always)]
        public int Scope
        {
            get { return _scope; }
            set 
            {
                if (_scope != value)
                {
                    _scope = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterDescriptor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterDescriptor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IFilterMetadata : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IFilterMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IFilterMetadata>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IValueProviderFactory : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IValueProviderFactory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IValueProviderFactory>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IModelMetadataProvider : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IModelMetadataProvider FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IModelMetadataProvider>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IModelBinderFactory : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IModelBinderFactory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IModelBinderFactory>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IUrlHelper : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IUrlHelper FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IUrlHelper>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IObjectModelValidator : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IObjectModelValidator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IObjectModelValidator>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimsPrincipal : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Claim> _claims;
        private System.Collections.ObjectModel.ObservableCollection<ClaimsIdentity> _identities;
        private IIdentity _identity;
    
        [Newtonsoft.Json.JsonProperty("Claims", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Claim> Claims
        {
            get { return _claims; }
            set 
            {
                if (_claims != value)
                {
                    _claims = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ClaimsIdentity> Identities
        {
            get { return _identities; }
            set 
            {
                if (_identities != value)
                {
                    _identities = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IIdentity Identity
        {
            get { return _identity; }
            set 
            {
                if (_identity != value)
                {
                    _identity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ClaimsPrincipal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClaimsPrincipal>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Claim : System.ComponentModel.INotifyPropertyChanged
    {
        private string _issuer;
        private string _originalIssuer;
        private System.Collections.Generic.Dictionary<string, string> _properties;
        private ClaimsIdentity _subject;
        private string _type;
        private string _value;
        private string _valueType;
    
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issuer
        {
            get { return _issuer; }
            set 
            {
                if (_issuer != value)
                {
                    _issuer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("OriginalIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalIssuer
        {
            get { return _originalIssuer; }
            set 
            {
                if (_originalIssuer != value)
                {
                    _originalIssuer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Properties
        {
            get { return _properties; }
            set 
            {
                if (_properties != value)
                {
                    _properties = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimsIdentity Subject
        {
            get { return _subject; }
            set 
            {
                if (_subject != value)
                {
                    _subject = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ValueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueType
        {
            get { return _valueType; }
            set 
            {
                if (_valueType != value)
                {
                    _valueType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Claim FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Claim>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimsIdentity : System.ComponentModel.INotifyPropertyChanged
    {
        private string _authenticationType;
        private bool _isAuthenticated;
        private ClaimsIdentity _actor;
        private object _bootstrapContext;
        private System.Collections.ObjectModel.ObservableCollection<Claim> _claims;
        private string _label;
        private string _name;
        private string _nameClaimType;
        private string _roleClaimType;
    
        [Newtonsoft.Json.JsonProperty("AuthenticationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthenticationType
        {
            get { return _authenticationType; }
            set 
            {
                if (_authenticationType != value)
                {
                    _authenticationType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("IsAuthenticated", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAuthenticated
        {
            get { return _isAuthenticated; }
            set 
            {
                if (_isAuthenticated != value)
                {
                    _isAuthenticated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimsIdentity Actor
        {
            get { return _actor; }
            set 
            {
                if (_actor != value)
                {
                    _actor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("BootstrapContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object BootstrapContext
        {
            get { return _bootstrapContext; }
            set 
            {
                if (_bootstrapContext != value)
                {
                    _bootstrapContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Claims", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Claim> Claims
        {
            get { return _claims; }
            set 
            {
                if (_claims != value)
                {
                    _claims = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NameClaimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameClaimType
        {
            get { return _nameClaimType; }
            set 
            {
                if (_nameClaimType != value)
                {
                    _nameClaimType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("RoleClaimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoleClaimType
        {
            get { return _roleClaimType; }
            set 
            {
                if (_roleClaimType != value)
                {
                    _roleClaimType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ClaimsIdentity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClaimsIdentity>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public abstract partial class IIdentity : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IIdentity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IIdentity>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdministrationController : Controller, System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdministrationController FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdministrationController>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrainingController : Controller, System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TrainingController FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrainingController>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }

}