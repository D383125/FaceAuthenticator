//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace ClientProxy
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SampleDataClient 
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SampleDataClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WeatherForecast>> WeatherForecastsAsync()
        {
            return WeatherForecastsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WeatherForecast>> WeatherForecastsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/SampleData/WeatherForecasts");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<WeatherForecast>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<WeatherForecast>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<WeatherForecast>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class VisionClient 
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public VisionClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public VisionClient()
        {
        }

        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DetectedFace> IdentifyIndividualAsync(byte[] personCapture)
        {
            return IdentifyIndividualAsync(personCapture, System.Threading.CancellationToken.None);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DetectedFace> IdentifyIndividualAsync(byte[] personCapture, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Vision");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(personCapture, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DetectedFace); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DetectedFace>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                           
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DetectedFace);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WeatherForecast : System.ComponentModel.INotifyPropertyChanged
    {
        private string _dateFormatted;
        private int _temperatureC;
        private string _summary;
        private int _temperatureF;
    
        [Newtonsoft.Json.JsonProperty("dateFormatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateFormatted
        {
            get { return _dateFormatted; }
            set 
            {
                if (_dateFormatted != value)
                {
                    _dateFormatted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("temperatureC", Required = Newtonsoft.Json.Required.Always)]
        public int TemperatureC
        {
            get { return _temperatureC; }
            set 
            {
                if (_temperatureC != value)
                {
                    _temperatureC = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary
        {
            get { return _summary; }
            set 
            {
                if (_summary != value)
                {
                    _summary = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("temperatureF", Required = Newtonsoft.Json.Required.Always)]
        public int TemperatureF
        {
            get { return _temperatureF; }
            set 
            {
                if (_temperatureF != value)
                {
                    _temperatureF = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeatherForecast FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherForecast>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Detected Face object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DetectedFace : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _faceId;
        private FaceRectangle _faceRectangle;
        private FaceLandmarks _faceLandmarks;
        private FaceAttributes _faceAttributes;
    
        [Newtonsoft.Json.JsonProperty("faceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FaceId
        {
            get { return _faceId; }
            set 
            {
                if (_faceId != value)
                {
                    _faceId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("faceRectangle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FaceRectangle FaceRectangle
        {
            get { return _faceRectangle; }
            set 
            {
                if (_faceRectangle != value)
                {
                    _faceRectangle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("faceLandmarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FaceLandmarks FaceLandmarks
        {
            get { return _faceLandmarks; }
            set 
            {
                if (_faceLandmarks != value)
                {
                    _faceLandmarks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("faceAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FaceAttributes FaceAttributes
        {
            get { return _faceAttributes; }
            set 
            {
                if (_faceAttributes != value)
                {
                    _faceAttributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DetectedFace FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DetectedFace>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>A rectangle within which a face can be found</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FaceRectangle : System.ComponentModel.INotifyPropertyChanged
    {
        private int _width;
        private int _height;
        private int _left;
        private int _top;
    
        /// <summary>Gets or sets the width of the rectangle, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width
        {
            get { return _width; }
            set 
            {
                if (_width != value)
                {
                    _width = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the height of the rectangle, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height
        {
            get { return _height; }
            set 
            {
                if (_height != value)
                {
                    _height = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the distance from the left edge if the image to the
        /// left edge of the rectangle, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("left", Required = Newtonsoft.Json.Required.Always)]
        public int Left
        {
            get { return _left; }
            set 
            {
                if (_left != value)
                {
                    _left = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the distance from the top edge if the image to the top
        /// edge of the rectangle, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Always)]
        public int Top
        {
            get { return _top; }
            set 
            {
                if (_top != value)
                {
                    _top = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FaceRectangle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FaceRectangle>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>A collection of 27-point face landmarks pointing to the important
    /// positions of face components.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FaceLandmarks : System.ComponentModel.INotifyPropertyChanged
    {
        private Coordinate _pupilLeft;
        private Coordinate _pupilRight;
        private Coordinate _noseTip;
        private Coordinate _mouthLeft;
        private Coordinate _mouthRight;
        private Coordinate _eyebrowLeftOuter;
        private Coordinate _eyebrowLeftInner;
        private Coordinate _eyeLeftOuter;
        private Coordinate _eyeLeftTop;
        private Coordinate _eyeLeftBottom;
        private Coordinate _eyeLeftInner;
        private Coordinate _eyebrowRightInner;
        private Coordinate _eyebrowRightOuter;
        private Coordinate _eyeRightInner;
        private Coordinate _eyeRightTop;
        private Coordinate _eyeRightBottom;
        private Coordinate _eyeRightOuter;
        private Coordinate _noseRootLeft;
        private Coordinate _noseRootRight;
        private Coordinate _noseLeftAlarTop;
        private Coordinate _noseRightAlarTop;
        private Coordinate _noseLeftAlarOutTip;
        private Coordinate _noseRightAlarOutTip;
        private Coordinate _upperLipTop;
        private Coordinate _upperLipBottom;
        private Coordinate _underLipTop;
        private Coordinate _underLipBottom;
    
        [Newtonsoft.Json.JsonProperty("pupilLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate PupilLeft
        {
            get { return _pupilLeft; }
            set 
            {
                if (_pupilLeft != value)
                {
                    _pupilLeft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pupilRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate PupilRight
        {
            get { return _pupilRight; }
            set 
            {
                if (_pupilRight != value)
                {
                    _pupilRight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseTip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseTip
        {
            get { return _noseTip; }
            set 
            {
                if (_noseTip != value)
                {
                    _noseTip = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mouthLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate MouthLeft
        {
            get { return _mouthLeft; }
            set 
            {
                if (_mouthLeft != value)
                {
                    _mouthLeft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mouthRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate MouthRight
        {
            get { return _mouthRight; }
            set 
            {
                if (_mouthRight != value)
                {
                    _mouthRight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyebrowLeftOuter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyebrowLeftOuter
        {
            get { return _eyebrowLeftOuter; }
            set 
            {
                if (_eyebrowLeftOuter != value)
                {
                    _eyebrowLeftOuter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyebrowLeftInner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyebrowLeftInner
        {
            get { return _eyebrowLeftInner; }
            set 
            {
                if (_eyebrowLeftInner != value)
                {
                    _eyebrowLeftInner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeLeftOuter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeLeftOuter
        {
            get { return _eyeLeftOuter; }
            set 
            {
                if (_eyeLeftOuter != value)
                {
                    _eyeLeftOuter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeLeftTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeLeftTop
        {
            get { return _eyeLeftTop; }
            set 
            {
                if (_eyeLeftTop != value)
                {
                    _eyeLeftTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeLeftBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeLeftBottom
        {
            get { return _eyeLeftBottom; }
            set 
            {
                if (_eyeLeftBottom != value)
                {
                    _eyeLeftBottom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeLeftInner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeLeftInner
        {
            get { return _eyeLeftInner; }
            set 
            {
                if (_eyeLeftInner != value)
                {
                    _eyeLeftInner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyebrowRightInner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyebrowRightInner
        {
            get { return _eyebrowRightInner; }
            set 
            {
                if (_eyebrowRightInner != value)
                {
                    _eyebrowRightInner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyebrowRightOuter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyebrowRightOuter
        {
            get { return _eyebrowRightOuter; }
            set 
            {
                if (_eyebrowRightOuter != value)
                {
                    _eyebrowRightOuter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeRightInner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeRightInner
        {
            get { return _eyeRightInner; }
            set 
            {
                if (_eyeRightInner != value)
                {
                    _eyeRightInner = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeRightTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeRightTop
        {
            get { return _eyeRightTop; }
            set 
            {
                if (_eyeRightTop != value)
                {
                    _eyeRightTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeRightBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeRightBottom
        {
            get { return _eyeRightBottom; }
            set 
            {
                if (_eyeRightBottom != value)
                {
                    _eyeRightBottom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eyeRightOuter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate EyeRightOuter
        {
            get { return _eyeRightOuter; }
            set 
            {
                if (_eyeRightOuter != value)
                {
                    _eyeRightOuter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseRootLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseRootLeft
        {
            get { return _noseRootLeft; }
            set 
            {
                if (_noseRootLeft != value)
                {
                    _noseRootLeft = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseRootRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseRootRight
        {
            get { return _noseRootRight; }
            set 
            {
                if (_noseRootRight != value)
                {
                    _noseRootRight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseLeftAlarTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseLeftAlarTop
        {
            get { return _noseLeftAlarTop; }
            set 
            {
                if (_noseLeftAlarTop != value)
                {
                    _noseLeftAlarTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseRightAlarTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseRightAlarTop
        {
            get { return _noseRightAlarTop; }
            set 
            {
                if (_noseRightAlarTop != value)
                {
                    _noseRightAlarTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseLeftAlarOutTip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseLeftAlarOutTip
        {
            get { return _noseLeftAlarOutTip; }
            set 
            {
                if (_noseLeftAlarOutTip != value)
                {
                    _noseLeftAlarOutTip = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("noseRightAlarOutTip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate NoseRightAlarOutTip
        {
            get { return _noseRightAlarOutTip; }
            set 
            {
                if (_noseRightAlarOutTip != value)
                {
                    _noseRightAlarOutTip = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("upperLipTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate UpperLipTop
        {
            get { return _upperLipTop; }
            set 
            {
                if (_upperLipTop != value)
                {
                    _upperLipTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("upperLipBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate UpperLipBottom
        {
            get { return _upperLipBottom; }
            set 
            {
                if (_upperLipBottom != value)
                {
                    _upperLipBottom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("underLipTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate UnderLipTop
        {
            get { return _underLipTop; }
            set 
            {
                if (_underLipTop != value)
                {
                    _underLipTop = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("underLipBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate UnderLipBottom
        {
            get { return _underLipBottom; }
            set 
            {
                if (_underLipBottom != value)
                {
                    _underLipBottom = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FaceLandmarks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FaceLandmarks>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Coordinates within an image</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Coordinate : System.ComponentModel.INotifyPropertyChanged
    {
        private double _x;
        private double _y;
    
        /// <summary>Gets or sets the horizontal component, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public double X
        {
            get { return _x; }
            set 
            {
                if (_x != value)
                {
                    _x = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets the vertical component, in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public double Y
        {
            get { return _y; }
            set 
            {
                if (_y != value)
                {
                    _y = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Coordinate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coordinate>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Face Attributes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FaceAttributes : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _age;
        private Gender? _gender;
        private double? _smile;
        private FacialHair _facialHair;
        private GlassesType? _glasses;
        private HeadPose _headPose;
        private Emotion _emotion;
        private Hair _hair;
        private Makeup _makeup;
        private Occlusion _occlusion;
        private System.Collections.ObjectModel.ObservableCollection<Accessory> _accessories;
        private Blur _blur;
        private Exposure _exposure;
        private Noise _noise;
    
        /// <summary>Gets or sets age in years</summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Age
        {
            get { return _age; }
            set 
            {
                if (_age != value)
                {
                    _age = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets possible gender of the face. Possible values include:
        /// 'male', 'female', 'genderless'</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender? Gender
        {
            get { return _gender; }
            set 
            {
                if (_gender != value)
                {
                    _gender = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets smile intensity, a number between [0,1]</summary>
        [Newtonsoft.Json.JsonProperty("smile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Smile
        {
            get { return _smile; }
            set 
            {
                if (_smile != value)
                {
                    _smile = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing facial hair attributes.</summary>
        [Newtonsoft.Json.JsonProperty("facialHair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacialHair FacialHair
        {
            get { return _facialHair; }
            set 
            {
                if (_facialHair != value)
                {
                    _facialHair = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets glasses type if any of the face. Possible values
        /// include: 'noGlasses', 'readingGlasses', 'sunglasses',
        /// 'swimmingGoggles'</summary>
        [Newtonsoft.Json.JsonProperty("glasses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlassesType? Glasses
        {
            get { return _glasses; }
            set 
            {
                if (_glasses != value)
                {
                    _glasses = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties indicating head pose of the face.</summary>
        [Newtonsoft.Json.JsonProperty("headPose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeadPose HeadPose
        {
            get { return _headPose; }
            set 
            {
                if (_headPose != value)
                {
                    _headPose = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing facial emotion in form of
        /// confidence ranging from 0 to 1.</summary>
        [Newtonsoft.Json.JsonProperty("emotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emotion Emotion
        {
            get { return _emotion; }
            set 
            {
                if (_emotion != value)
                {
                    _emotion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing hair attributes.</summary>
        [Newtonsoft.Json.JsonProperty("hair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hair Hair
        {
            get { return _hair; }
            set 
            {
                if (_hair != value)
                {
                    _hair = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing present makeups on a given face.</summary>
        [Newtonsoft.Json.JsonProperty("makeup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Makeup Makeup
        {
            get { return _makeup; }
            set 
            {
                if (_makeup != value)
                {
                    _makeup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing occlusions on a given face.</summary>
        [Newtonsoft.Json.JsonProperty("occlusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Occlusion Occlusion
        {
            get { return _occlusion; }
            set 
            {
                if (_occlusion != value)
                {
                    _occlusion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing any accessories on a given face.</summary>
        [Newtonsoft.Json.JsonProperty("accessories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Accessory> Accessories
        {
            get { return _accessories; }
            set 
            {
                if (_accessories != value)
                {
                    _accessories = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing any presence of blur within the
        /// image.</summary>
        [Newtonsoft.Json.JsonProperty("blur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Blur Blur
        {
            get { return _blur; }
            set 
            {
                if (_blur != value)
                {
                    _blur = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing exposure level of the image.</summary>
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exposure Exposure
        {
            get { return _exposure; }
            set 
            {
                if (_exposure != value)
                {
                    _exposure = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets properties describing noise level of the image.</summary>
        [Newtonsoft.Json.JsonProperty("noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Noise Noise
        {
            get { return _noise; }
            set 
            {
                if (_noise != value)
                {
                    _noise = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FaceAttributes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FaceAttributes>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for Gender.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Gender
    {
        [System.Runtime.Serialization.EnumMember(Value = "male")]
        Male = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "female")]
        Female = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "genderless")]
        Genderless = 2,
    
    }
    
    /// <summary>Properties describing facial hair attributes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FacialHair : System.ComponentModel.INotifyPropertyChanged
    {
        private double _moustache;
        private double _beard;
        private double _sideburns;
    
        [Newtonsoft.Json.JsonProperty("moustache", Required = Newtonsoft.Json.Required.Always)]
        public double Moustache
        {
            get { return _moustache; }
            set 
            {
                if (_moustache != value)
                {
                    _moustache = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("beard", Required = Newtonsoft.Json.Required.Always)]
        public double Beard
        {
            get { return _beard; }
            set 
            {
                if (_beard != value)
                {
                    _beard = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sideburns", Required = Newtonsoft.Json.Required.Always)]
        public double Sideburns
        {
            get { return _sideburns; }
            set 
            {
                if (_sideburns != value)
                {
                    _sideburns = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FacialHair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FacialHair>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for GlassesType.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlassesType
    {
        [System.Runtime.Serialization.EnumMember(Value = "noGlasses")]
        NoGlasses = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "readingGlasses")]
        ReadingGlasses = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "sunglasses")]
        Sunglasses = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "swimmingGoggles")]
        SwimmingGoggles = 3,
    
    }
    
    /// <summary>Properties indicating head pose of the face.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HeadPose : System.ComponentModel.INotifyPropertyChanged
    {
        private double _roll;
        private double _yaw;
        private double _pitch;
    
        [Newtonsoft.Json.JsonProperty("roll", Required = Newtonsoft.Json.Required.Always)]
        public double Roll
        {
            get { return _roll; }
            set 
            {
                if (_roll != value)
                {
                    _roll = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("yaw", Required = Newtonsoft.Json.Required.Always)]
        public double Yaw
        {
            get { return _yaw; }
            set 
            {
                if (_yaw != value)
                {
                    _yaw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pitch", Required = Newtonsoft.Json.Required.Always)]
        public double Pitch
        {
            get { return _pitch; }
            set 
            {
                if (_pitch != value)
                {
                    _pitch = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HeadPose FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeadPose>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Properties describing facial emotion in form of confidence ranging from
    /// 0 to 1.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Emotion : System.ComponentModel.INotifyPropertyChanged
    {
        private double _anger;
        private double _contempt;
        private double _disgust;
        private double _fear;
        private double _happiness;
        private double _neutral;
        private double _sadness;
        private double _surprise;
    
        [Newtonsoft.Json.JsonProperty("anger", Required = Newtonsoft.Json.Required.Always)]
        public double Anger
        {
            get { return _anger; }
            set 
            {
                if (_anger != value)
                {
                    _anger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contempt", Required = Newtonsoft.Json.Required.Always)]
        public double Contempt
        {
            get { return _contempt; }
            set 
            {
                if (_contempt != value)
                {
                    _contempt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("disgust", Required = Newtonsoft.Json.Required.Always)]
        public double Disgust
        {
            get { return _disgust; }
            set 
            {
                if (_disgust != value)
                {
                    _disgust = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fear", Required = Newtonsoft.Json.Required.Always)]
        public double Fear
        {
            get { return _fear; }
            set 
            {
                if (_fear != value)
                {
                    _fear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("happiness", Required = Newtonsoft.Json.Required.Always)]
        public double Happiness
        {
            get { return _happiness; }
            set 
            {
                if (_happiness != value)
                {
                    _happiness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("neutral", Required = Newtonsoft.Json.Required.Always)]
        public double Neutral
        {
            get { return _neutral; }
            set 
            {
                if (_neutral != value)
                {
                    _neutral = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sadness", Required = Newtonsoft.Json.Required.Always)]
        public double Sadness
        {
            get { return _sadness; }
            set 
            {
                if (_sadness != value)
                {
                    _sadness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("surprise", Required = Newtonsoft.Json.Required.Always)]
        public double Surprise
        {
            get { return _surprise; }
            set 
            {
                if (_surprise != value)
                {
                    _surprise = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Emotion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Emotion>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Properties describing hair attributes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Hair : System.ComponentModel.INotifyPropertyChanged
    {
        private double _bald;
        private bool _invisible;
        private System.Collections.ObjectModel.ObservableCollection<HairColor> _hairColor;
    
        /// <summary>Gets or sets a number describing confidence level of whether the
        /// person is bald.</summary>
        [Newtonsoft.Json.JsonProperty("bald", Required = Newtonsoft.Json.Required.Always)]
        public double Bald
        {
            get { return _bald; }
            set 
            {
                if (_bald != value)
                {
                    _bald = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a boolean value describing whether the hair is visible
        /// in the image.</summary>
        [Newtonsoft.Json.JsonProperty("invisible", Required = Newtonsoft.Json.Required.Always)]
        public bool Invisible
        {
            get { return _invisible; }
            set 
            {
                if (_invisible != value)
                {
                    _invisible = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets an array of candidate colors and confidence level in
        /// the presence of each.</summary>
        [Newtonsoft.Json.JsonProperty("hairColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<HairColor> HairColor
        {
            get { return _hairColor; }
            set 
            {
                if (_hairColor != value)
                {
                    _hairColor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Hair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hair>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Hair color and associated confidence</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HairColor : System.ComponentModel.INotifyPropertyChanged
    {
        private HairColorType _color;
        private double _confidence;
    
        /// <summary>Gets or sets name of the hair color. Possible values include:
        /// 'unknown', 'white', 'gray', 'blond', 'brown', 'red', 'black',
        /// 'other'</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HairColorType Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets confidence level of the color</summary>
        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Always)]
        public double Confidence
        {
            get { return _confidence; }
            set 
            {
                if (_confidence != value)
                {
                    _confidence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HairColor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HairColor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for HairColorType.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum HairColorType
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "white")]
        White = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "gray")]
        Gray = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "blond")]
        Blond = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "brown")]
        Brown = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "red")]
        Red = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "black")]
        Black = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "other")]
        Other = 7,
    
    }
    
    /// <summary>Properties describing present makeups on a given face.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Makeup : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _eyeMakeup;
        private bool _lipMakeup;
    
        /// <summary>Gets or sets a boolean value describing whether eye makeup is
        /// present on a face.</summary>
        [Newtonsoft.Json.JsonProperty("eyeMakeup", Required = Newtonsoft.Json.Required.Always)]
        public bool EyeMakeup
        {
            get { return _eyeMakeup; }
            set 
            {
                if (_eyeMakeup != value)
                {
                    _eyeMakeup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a boolean value describing whether lip makeup is
        /// present on a face.</summary>
        [Newtonsoft.Json.JsonProperty("lipMakeup", Required = Newtonsoft.Json.Required.Always)]
        public bool LipMakeup
        {
            get { return _lipMakeup; }
            set 
            {
                if (_lipMakeup != value)
                {
                    _lipMakeup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Makeup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Makeup>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Properties describing occlusions on a given face.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Occlusion : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _foreheadOccluded;
        private bool _eyeOccluded;
        private bool _mouthOccluded;
    
        /// <summary>Gets or sets a boolean value indicating whether forehead is
        /// occluded.</summary>
        [Newtonsoft.Json.JsonProperty("foreheadOccluded", Required = Newtonsoft.Json.Required.Always)]
        public bool ForeheadOccluded
        {
            get { return _foreheadOccluded; }
            set 
            {
                if (_foreheadOccluded != value)
                {
                    _foreheadOccluded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a boolean value indicating whether eyes are occluded.</summary>
        [Newtonsoft.Json.JsonProperty("eyeOccluded", Required = Newtonsoft.Json.Required.Always)]
        public bool EyeOccluded
        {
            get { return _eyeOccluded; }
            set 
            {
                if (_eyeOccluded != value)
                {
                    _eyeOccluded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a boolean value indicating whether the mouth is
        /// occluded.</summary>
        [Newtonsoft.Json.JsonProperty("mouthOccluded", Required = Newtonsoft.Json.Required.Always)]
        public bool MouthOccluded
        {
            get { return _mouthOccluded; }
            set 
            {
                if (_mouthOccluded != value)
                {
                    _mouthOccluded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Occlusion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Occlusion>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Accessory item and corresponding confidence level.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Accessory : System.ComponentModel.INotifyPropertyChanged
    {
        private AccessoryType _type;
        private double _confidence;
    
        /// <summary>Gets or sets type of an accessory. Possible values include:
        /// 'headWear', 'glasses', 'mask'</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccessoryType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets confidence level of an accessory</summary>
        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Always)]
        public double Confidence
        {
            get { return _confidence; }
            set 
            {
                if (_confidence != value)
                {
                    _confidence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Accessory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessory>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for AccessoryType.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AccessoryType
    {
        [System.Runtime.Serialization.EnumMember(Value = "headWear")]
        HeadWear = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "glasses")]
        Glasses = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mask")]
        Mask = 2,
    
    }
    
    /// <summary>Properties describing any presence of blur within the image.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Blur : System.ComponentModel.INotifyPropertyChanged
    {
        private BlurLevel _blurLevel;
        private double _value;
    
        /// <summary>Gets or sets an enum value indicating level of blurriness. Possible
        /// values include: 'Low', 'Medium', 'High'</summary>
        [Newtonsoft.Json.JsonProperty("blurLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BlurLevel BlurLevel
        {
            get { return _blurLevel; }
            set 
            {
                if (_blurLevel != value)
                {
                    _blurLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a number indicating level of blurriness ranging from 0
        /// to 1.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Blur FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blur>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for BlurLevel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BlurLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 2,
    
    }
    
    /// <summary>Properties describing exposure level of the image.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Exposure : System.ComponentModel.INotifyPropertyChanged
    {
        private ExposureLevel _exposureLevel;
        private double _value;
    
        /// <summary>Gets or sets an enum value indicating level of exposure. Possible
        /// values include: 'UnderExposure', 'GoodExposure', 'OverExposure'</summary>
        [Newtonsoft.Json.JsonProperty("exposureLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExposureLevel ExposureLevel
        {
            get { return _exposureLevel; }
            set 
            {
                if (_exposureLevel != value)
                {
                    _exposureLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a number indicating level of exposure level ranging
        /// from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good
        /// exposure. [0.75, 1] is over exposure.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Exposure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exposure>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for ExposureLevel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ExposureLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "UnderExposure")]
        UnderExposure = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "GoodExposure")]
        GoodExposure = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OverExposure")]
        OverExposure = 2,
    
    }
    
    /// <summary>Properties describing noise level of the image.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Noise : System.ComponentModel.INotifyPropertyChanged
    {
        private NoiseLevel _noiseLevel;
        private double _value;
    
        /// <summary>Gets or sets an enum value indicating level of noise. Possible
        /// values include: 'Low', 'Medium', 'High'</summary>
        [Newtonsoft.Json.JsonProperty("noiseLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NoiseLevel NoiseLevel
        {
            get { return _noiseLevel; }
            set 
            {
                if (_noiseLevel != value)
                {
                    _noiseLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Gets or sets a number indicating level of noise level ranging from
        /// 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure.
        /// [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7)
        /// is medium noise level. [0.7, 1] is high noise level.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Noise FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Noise>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Defines values for NoiseLevel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NoiseLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}